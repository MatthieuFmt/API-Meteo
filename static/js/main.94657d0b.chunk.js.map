{"version":3,"sources":["Components/Meteo/Meteo.js","App.js","index.js"],"names":["Meteo","week","useState","description","icon","temperature","humidity","wind","city","firstCall","dayNight","tempMax","tempMin","prevWeek","prevIcon","state","setState","console","log","srcImg","process","currentHour","Date","getHours","currentDay","getDate","currentMonth","getMonth","currentYear","getFullYear","now","toLocaleDateString","weekday","charAt","toLocaleUpperCase","slice","orderedDays","indexOf","concat","fullDate","useEffect","navigator","geolocation","getCurrentPosition","position","long","lat","fetch","then","rep","json","data","newArr","current","weather","Math","trunc","temp","wind_speed","timezone","arrayMax","arrayMin","arrayPrevWeek","arrayPrevIcon","i","daily","length","push","max","min","APICall","coords","longitude","latitude","alert","className","src","map","day","key","alt","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94657d0b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Meteo.css\";\r\n\r\nexport default function Meteo() {\r\n  const keyAPI = \"fdcf4f88380f694ed4370fe3f5f0dafa\";\r\n\r\n  const week = [\r\n    \"Lundi\",\r\n    \"Mardi\",\r\n    \"Mercredi\",\r\n    \"Jeudi\",\r\n    \"Vendredi\",\r\n    \"Samedi\",\r\n    \"Dimanche\",\r\n  ];\r\n\r\n  const [state, setState] = useState({\r\n    description: \"\",\r\n    icon: \"\",\r\n    temperature: \"\",\r\n    humidity: \"\",\r\n    wind: \"\",\r\n    city: \"\",\r\n    firstCall: true,\r\n    dayNight: \"\",\r\n    tempMax: [],\r\n    tempMin: [],\r\n    prevWeek: [],\r\n    prevIcon: [],\r\n  });\r\n  console.log(state);\r\n\r\n  let srcImg =\r\n    process.env.PUBLIC_URL + `/assets/${state.dayNight}/${state.icon}.svg`;\r\n  console.log(srcImg);\r\n\r\n  let currentHour = new Date().getHours();\r\n\r\n  let currentDay = new Date().getDate();\r\n  let currentMonth = new Date().getMonth() + 1;\r\n  let currentYear = new Date().getFullYear();\r\n\r\n  let today = new Date();\r\n  let options = { weekday: \"long\" };\r\n  let now = today.toLocaleDateString(\"fr-FR\", options);\r\n\r\n  now = now.charAt(0).toLocaleUpperCase() + now.slice(1);\r\n\r\n  let orderedDays = week\r\n    .slice(week.indexOf(now))\r\n    .concat(week.slice(0, week.indexOf(now)));\r\n\r\n  let fullDate = `${currentDay < 10 ? `0${currentDay}` : currentDay}/${\r\n    currentMonth < 10 ? `0${currentMonth}` : currentMonth\r\n  }/${currentYear}`;\r\n\r\n  const APICall = (long, lat) => {\r\n    fetch(\r\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=minutely&lang=fr&units=metric&appid=${keyAPI}`\r\n    )\r\n      .then((rep) => {\r\n        return rep.json();\r\n      })\r\n      .then((data) => {\r\n        let newArr = { ...state };\r\n        newArr.description = data.current.weather[0].description;\r\n        newArr.icon = data.current.weather[0].icon;\r\n        newArr.temperature = `${Math.trunc(data.current.temp)}°`;\r\n        newArr.humidity = `${data.current.humidity}%`;\r\n        newArr.wind = `${data.current.wind_speed}Km/h`;\r\n        newArr.city = data.timezone;\r\n        newArr.dayNight =\r\n          currentHour >= 6 && currentHour < 21 ? \"jour\" : \"nuit\";\r\n\r\n        const arrayMax = { ...state };\r\n        const arrayMin = { ...state };\r\n        const arrayPrevWeek = { ...state };\r\n        const arrayPrevIcon = { ...state };\r\n        for (let i = 1; i < data.daily.length; i++) {\r\n          arrayMax.tempMax.push(data.daily[i].temp.max);\r\n          arrayMin.tempMin.push(data.daily[i].temp.min);\r\n          arrayPrevWeek.prevWeek.push(data.daily[i].weather[0].description);\r\n          arrayPrevIcon.prevIcon.push(data.daily[i].weather[0].icon);\r\n        }\r\n        setState(arrayMax, arrayMin, arrayPrevWeek);\r\n        setState(newArr);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        let long = position.coords.longitude;\r\n        let lat = position.coords.latitude;\r\n        APICall(long, lat);\r\n        // setFirstCall(false);\r\n      },\r\n      () => {\r\n        alert(\"La localisation est désactivé\");\r\n      }\r\n    );\r\n    // }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"grid-meteo\">\r\n      <div className=\"city\">{state.city}</div>\r\n      <div className=\"date\">\r\n        <div className=\"now\">{now}</div>\r\n        <div className=\"full-date\">{fullDate}</div>\r\n      </div>\r\n      <div className=\"infos\">\r\n        <div className=\"temp\">{state.temperature}</div>\r\n        <div className=\"description\">{state.description}</div>\r\n        <div className=\"other-info\">\r\n          <span>\r\n            Humidité: <br />\r\n            {state.humidity}\r\n          </span>\r\n          <span>\r\n            Vent: <br />\r\n            {state.wind}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"logo\">\r\n        <img src={srcImg} />\r\n      </div>\r\n      <div className=\"prev\">\r\n        {orderedDays.map((day, key) => (\r\n          <div key={key} className=\"days \">\r\n            <div className=\"week-day\">{day.slice(0, 3)}.</div>\r\n            <div className=\"icon-week\">\r\n              <img\r\n                src={\r\n                  process.env.PUBLIC_URL +\r\n                  `/assets/jour/${state.prevIcon[key]}.svg`\r\n                }\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n            <div className=\"min-max\">\r\n              <span className=\"max\">{state.tempMax[key]}</span>/\r\n              <span className=\"min\">{state.tempMin[key]}</span>\r\n            </div>\r\n            <div className=\"prev-week\">{state.prevWeek[key]}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Meteo from \"./Components/Meteo/Meteo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Meteo />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}