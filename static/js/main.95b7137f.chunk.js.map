{"version":3,"sources":["Components/Meteo/Meteo.js","App.js","index.js"],"names":["Meteo","week","useState","description","setDescription","icon","setIcon","temp","setTemp","humidity","setHumidity","wind","setWind","firstCall","setFirstCall","dayNight","setDayNight","stateTempMax","setStateTempMax","stateTempMin","setStateTempMin","prevWeek","setPrevWeek","prevIcon","setPrevIcon","city","setCity","srcImg","currentHour","Date","getHours","useEffect","currentDay","getDate","currentMonth","getMonth","currentYear","getFullYear","now","toLocaleDateString","weekday","charAt","toLocaleUpperCase","slice","orderedDays","indexOf","concat","fullDate","navigator","geolocation","getCurrentPosition","position","long","lat","fetch","then","rep","json","data","current","weather","Math","trunc","wind_speed","timezone","console","log","arrayMax","arrayMin","arrayPrevWeek","arrayPrevIcon","i","daily","length","push","max","min","APICall","coords","longitude","latitude","alert","className","src","alt","map","day","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95b7137f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Meteo.css\";\r\n\r\nexport default function Meteo() {\r\n  const keyAPI = \"fdcf4f88380f694ed4370fe3f5f0dafa\";\r\n\r\n  const week = [\r\n    \"Lundi\",\r\n    \"Mardi\",\r\n    \"Mercredi\",\r\n    \"Jeudi\",\r\n    \"Vendredi\",\r\n    \"Samedi\",\r\n    \"Dimanche\",\r\n  ];\r\n\r\n  const [description, setDescription] = useState(\"\");\r\n  const [icon, setIcon] = useState(\"\");\r\n  const [temp, setTemp] = useState(\"\");\r\n  const [humidity, setHumidity] = useState(\"\");\r\n  const [wind, setWind] = useState(\"\");\r\n  const [firstCall, setFirstCall] = useState(true);\r\n  const [dayNight, setDayNight] = useState(\"\");\r\n  const [stateTempMax, setStateTempMax] = useState([]);\r\n  const [stateTempMin, setStateTempMin] = useState([]);\r\n  const [prevWeek, setPrevWeek] = useState([]);\r\n  const [prevIcon, setPrevIcon] = useState([]);\r\n  const [city, setCity] = useState([]);\r\n\r\n  let srcImg = `./assets/${dayNight}/${icon}.svg`;\r\n\r\n  let currentHour = new Date().getHours();\r\n  useEffect(() => {\r\n    if (currentHour >= 6 && currentHour < 21) {\r\n      setDayNight(\"jour\");\r\n    } else {\r\n      setDayNight(\"nuit\");\r\n    }\r\n  }, [dayNight]);\r\n\r\n  let currentDay = new Date().getDate();\r\n  let currentMonth = new Date().getMonth() + 1;\r\n  let currentYear = new Date().getFullYear();\r\n\r\n  let today = new Date();\r\n  let options = { weekday: \"long\" };\r\n  let now = today.toLocaleDateString(\"fr-FR\", options);\r\n\r\n  now = now.charAt(0).toLocaleUpperCase() + now.slice(1);\r\n\r\n  let orderedDays = week\r\n    .slice(week.indexOf(now))\r\n    .concat(week.slice(0, week.indexOf(now)));\r\n\r\n  let fullDate = `${currentDay < 10 ? `0${currentDay}` : currentDay}/${\r\n    currentMonth < 10 ? `0${currentMonth}` : currentMonth\r\n  }/${currentYear}`;\r\n\r\n  const APICall = (long, lat) => {\r\n    fetch(\r\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=minutely&lang=fr&units=metric&appid=${keyAPI}`\r\n    )\r\n      .then((rep) => {\r\n        return rep.json();\r\n      })\r\n      .then((data) => {\r\n        setDescription(data.current.weather[0].description);\r\n        setIcon(data.current.weather[0].icon);\r\n        setTemp(Math.trunc(data.current.temp));\r\n        setHumidity(`${data.current.humidity}%`);\r\n        setWind(`${data.current.wind_speed}Km/h`);\r\n        setCity(data.timezone);\r\n        console.log(data);\r\n        const arrayMax = [...stateTempMax];\r\n        const arrayMin = [...stateTempMin];\r\n        const arrayPrevWeek = [...prevWeek];\r\n        const arrayPrevIcon = [...prevIcon];\r\n\r\n        for (let i = 0; i < data.daily.length; i++) {\r\n          arrayMax.push(data.daily[i].temp.max);\r\n          arrayMin.push(data.daily[i].temp.min);\r\n          arrayPrevWeek.push(data.daily[i].weather[0].description);\r\n          arrayPrevIcon.push(data.daily[i].weather[0].icon);\r\n\r\n          setStateTempMax(arrayMax);\r\n          setStateTempMin(arrayMin);\r\n          setPrevWeek(arrayPrevWeek);\r\n          setPrevIcon(arrayPrevIcon);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (firstCall) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          let long = position.coords.longitude;\r\n          let lat = position.coords.latitude;\r\n          APICall(long, lat);\r\n          setFirstCall(false);\r\n        },\r\n        () => {\r\n          alert(\"La localisation est désactivé\");\r\n        }\r\n      );\r\n    }\r\n  }, [firstCall]);\r\n\r\n  return (\r\n    <div className=\"grid-meteo\">\r\n      <div className=\"city\">{city}</div>\r\n      <div className=\"date\">\r\n        <div className=\"now\">{now}</div>\r\n        <div className=\"full-date\">{fullDate}</div>\r\n      </div>\r\n      <div className=\"infos\">\r\n        <div className=\"temp\"> {`${temp}°`}</div>\r\n        <div className=\"description\">{description}</div>\r\n        <div className=\"other-info\">\r\n          <span>\r\n            Humidité: <br />\r\n            {humidity}\r\n          </span>\r\n          <span>\r\n            Vent: <br />\r\n            {wind}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"logo\">\r\n        <img src={srcImg} alt=\"\" />\r\n      </div>\r\n      <div className=\"prev\">\r\n        {orderedDays.map((day, key) => (\r\n          <div key={key} className=\"days \">\r\n            <div className=\"week-day\">{day.slice(0, 3)}.</div>\r\n            <div className=\"icon-week\">\r\n              <img src={`./assets/jour/${prevIcon[key + 1]}.svg`} alt=\"\" />\r\n            </div>\r\n            <div className=\"min-max\">\r\n              <span className=\"max\">{stateTempMax[key + 1]}</span>/\r\n              <span className=\"min\">{stateTempMin[key + 1]}</span>\r\n            </div>\r\n            <div className=\"prev-week\">{prevWeek[key + 1]}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Meteo from \"./Components/Meteo/Meteo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Meteo />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}